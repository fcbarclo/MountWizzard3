
    private void J2000ToTopo()
    {
      if (double.IsNaN(this.SiteElevValue))
        throw new TransformUninitialisedException("Site elevation has not been set");
      if (double.IsNaN(this.SiteLatValue))
        throw new TransformUninitialisedException("Site latitude has not been set");
      if (double.IsNaN(this.SiteLongValue))
        throw new TransformUninitialisedException("Site longitude has not been set");
      if (double.IsNaN(this.SiteTempValue))
        throw new TransformUninitialisedException("Site temperature has not been set");
      this.Sw.Reset();
      this.Sw.Start();
      double jdutcSofa = this.GetJDUTCSofa();
      DeltatCode.DeltaTCalc(jdutcSofa);
      double dut1 = this.AstroUtl.DeltaUT(jdutcSofa);
      this.Julian2DateTime(jdutcSofa);
      this.Sw.Reset();
      this.Sw.Start();
      double aob;
      double zob;
      double hob;
      double dob;
      double rob;
      double eo;

       private void TopoToJ2000()
    {
      if (double.IsNaN(this.SiteElevValue))
        throw new TransformUninitialisedException("Site elevation has not been set");
      if (double.IsNaN(this.SiteLatValue))
        throw new TransformUninitialisedException("Site latitude has not been set");
      if (double.IsNaN(this.SiteLongValue))
        throw new TransformUninitialisedException("Site longitude has not been set");
      if (double.IsNaN(this.SiteTempValue))
        throw new TransformUninitialisedException("Site temperature has not been set");
      this.Sw.Reset();
      this.Sw.Start();
      double jdutcSofa = this.GetJDUTCSofa();
      double jdttSofa = this.GetJDTTSofa();
      double dut1 = this.AstroUtl.DeltaUT(jdutcSofa);
      this.Sw.Reset();
      this.Sw.Start();
      double rc;
      double dc;
      int num = !this.RefracValue ? this.SOFA.ObservedToCelestial("R", this.SOFA.Anp(this.RATopoValue * (Math.PI / 12.0) + this.SOFA.Eo06a(jdttSofa, 0.0)), this.DECTopoValue * (Math.PI / 180.0), jdutcSofa, 0.0, dut1, this.SiteLongValue * (Math.PI / 180.0), this.SiteLatValue * (Math.PI / 180.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ref rc, ref dc) : this.SOFA.ObservedToCelestial("R", this.SOFA.Anp(this.RATopoValue * (Math.PI / 12.0) + this.SOFA.Eo06a(jdttSofa, 0.0)), this.DECTopoValue * (Math.PI / 180.0), jdutcSofa, 0.0, dut1, this.SiteLongValue * (Math.PI / 180.0), this.SiteLatValue * (Math.PI / 180.0), this.SiteElevValue, 0.0, 0.0, 1000.0, this.SiteTempValue, 0.85, 0.57, ref rc, ref dc);
      this.RAJ2000Value = rc * (12.0 / Math.PI);
      this.DECJ2000Value = dc * (180.0 / Math.PI);
      this.TL.LogMessage("  Topo To J2000", "  J2000 RA/Dec:" + this.FormatRA(this.RAJ2000Value) + " " + this.FormatDec(this.DECJ2000Value) + ", " + Strings.FormatNumber((object) this.Sw.Elapsed.TotalMilliseconds, 2, TriState.UseDefault, TriState.UseDefault, TriState.UseDefault) + "ms");
      this.Sw.Reset();
      this.Sw.Start();
      double aob;
      double zob;
      double hob;
      double dob;
      double rob;
      double eo;
      if (this.RefracValue)
        this.SOFA.CelestialToObserved(this.RAJ2000Value * (Math.PI / 12.0), this.DECJ2000Value * (Math.PI / 180.0), 0.0, 0.0, 0.0, 0.0, jdutcSofa, 0.0, dut1, this.SiteLongValue * (Math.PI / 180.0), this.SiteLatValue * (Math.PI / 180.0), this.SiteElevValue, 0.0, 0.0, 1000.0, this.SiteTempValue, 0.8, 0.57, ref aob, ref zob, ref hob, ref dob, ref rob, ref eo);
      else
        this.SOFA.CelestialToObserved(this.RAJ2000Value * (Math.PI / 12.0), this.DECJ2000Value * (Math.PI / 180.0), 0.0, 0.0, 0.0, 0.0, jdutcSofa, 0.0, dut1, this.SiteLongValue * (Math.PI / 180.0), this.SiteLatValue * (Math.PI / 180.0), this.SiteElevValue, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ref aob, ref zob, ref hob, ref dob, ref rob, ref eo);
      this.AzimuthTopoValue = aob * (180.0 / Math.PI);
      this.ElevationTopoValue = 90.0 - zob * (180.0 / Math.PI);
      this.TL.LogMessage("  Topo To J2000", "  Azimuth/Elevation: " + this.FormatDec(this.AzimuthTopoValue) + " " + this.FormatDec(this.ElevationTopoValue) + ", " + Strings.FormatNumber((object) this.Sw.Elapsed.TotalMilliseconds, 2, TriState.UseDefault, TriState.UseDefault, TriState.UseDefault) + "ms");
    }


    public int ObservedToCelestial(string type, double ob1, double ob2, double utc1, double utc2, double dut1, double elong, double phi, double hm, double xp, double yp, double phpa, double tc, double rh, double wl, ref double rc, ref double dc)
    {
      return Convert.ToInt32(ASCOM.Astrometry.SOFA.SOFA.Atoc13(type, ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl, ref rc, ref dc));
    }